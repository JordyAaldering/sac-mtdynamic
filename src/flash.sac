use Array: all;
use CommandLine: all;
use StdIO: all;

#define D 64

inline
float[m,n] stabilise(float[m,n] x)
{
    return { [i] -> x[i] - maxval(x[i])
           | [i] < [m] };
}

inline
float[d:shp] exp(float[d:shp] x)
{
    return { iv -> Math::exp(x[iv])
           | iv < shp };
}

inline
float[m,n] scale(float[m,n] x)
{
    return { [i] -> x[i] / sum(x)
           | [i] < [m] };
}

inline
float[m,n] matmulT(float[m,k] a, float[n,k] bT)
{
    return { [i,j] -> sum(a[i] * bT[j])
           | [i,j] < [m,n] };
}

noinline
float[Nd,d,d] FlashAttention(float[Nd,d,d] Q, float[N,d] K, float[N,d] V)
{
    MTClock::touch();

    Vt = transpose(V);
    return { [i] -> matmulT(scale(exp(stabilise(matmulT(Q[i], K)))), Vt)
           | [i] < [Nd] };
}

int main()
{
    iter = String::toi(argv(argc() - 2));
    size = String::toi(argv(argc() - 1));

    Q = { [i, j, k] -> tof(1) / (tof(1) + tof(i)) | [i, j, k] < [size / D, D, D] };
    K = { [i, j]    -> tof(1)                     | [i, j] < [size, D] };
    V = { [i, j]    -> tof(1)                     | [i, j] < [size, D] };

    for (i = 0; i < iter; i += 1) {
        sec, nsec, rapl = Bench::start();
        Q = FlashAttention(Q, K, V);
        Bench::stop(sec, nsec, rapl);
    }

    return toi(Q[0,0,0]);
}
