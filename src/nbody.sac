#define OVERLOADED +,-,*
use Array: all except { OVERLOADED };
import Array: { OVERLOADED };
use CommandLine: all;
use StdIO: all;

#define EPSILON2 0x1p-53

struct Vec3d {
    double x;
    double y;
    double z;
};

inline
double l2norm(struct Vec3d a)
{
    x2 = _mul_SxS_(a.x, a.x);
    y2 = _mul_SxS_(a.y, a.y);
    z2 = _mul_SxS_(a.z, a.z);
    xyz = _add_SxS_(_add_SxS_(x2, y2), z2);
    return Math::sqrt(xyz);
}

inline
struct Vec3d -(struct Vec3d a, struct Vec3d b)
{
    return Vec3d{ _sub_SxS_(a.x, b.x),
                  _sub_SxS_(a.y, b.y),
                  _sub_SxS_(a.z, b.z) };
}

inline
struct Vec3d +(struct Vec3d a, struct Vec3d b)
{
    return Vec3d{ _add_SxS_(a.x, b.x),
                  _add_SxS_(a.y, b.y),
                  _add_SxS_(a.z, b.z) };
}

inline
struct Vec3d[d:shp] +(struct Vec3d[d:shp] a, struct Vec3d[d:shp] b)
{
    return { iv ->  _sel_VxA_(iv, a) + _sel_VxA_(iv, b) | iv < shp };
}

inline
struct Vec3d *(struct Vec3d a, double b)
{
    return Vec3d{ _mul_SxS_(a.x, b),
                  _mul_SxS_(a.y, b),
                  _mul_SxS_(a.z, b) };
}

inline
struct Vec3d[d:shp] *(struct Vec3d[d:shp] a, double b)
{
    return { iv -> _sel_VxA_(iv, a) * b | iv < shp };
}

struct Body {
   struct Vec3d pos;
   struct Vec3d vel;
   double mass;
};

inline
double pow3(double x)
{
    return x * x * x;
}

inline
struct Vec3d acc(struct Body b, struct Body b2)
{
   dir = b2.pos - b.pos;
   return dir * (b2.mass / pow3(EPSILON2 + l2norm(dir)));
}

noinline
struct Body[n] timeStep(struct Body[n] bs, double dt)
{
    MTClock::touch();

    acc = with {
            ([0] <= [i] < [n])
            #pragma gpukernel GridBlock(1, SplitLast(64, CompressGrid([1], ShiftLB(Gen))))
            : with {
                ([0] <= [j] < [n]): acc(_sel_VxA_([i], bs), _sel_VxA_([j], bs));
            }: fold(+, Vec3d{});
        }: genarray([n], Vec3d{});

    bs.vel += acc * dt;
    bs.pos += bs.vel * dt;
    return bs;
}

int main()
{
    iter = String::toi(argv(argc() - 2));
    size = String::toi(argv(argc() - 1));

    bodies = { [i] -> Body { .pos = Vec3d { tod(i), tod(2 * i), tod(3 * i) },
                             .vel = Vec3d {},
                             .mass = 1d }
             | [i] < [size] };

    for (i = 0; i < iter; i += 1) {
        sec, nsec, rapl = Bench::start();
        bodies = timeStep(bodies, 0.01);
        Bench::stop(sec, nsec, rapl);
    }

    return toi(_sel_VxA_([0], bodies).pos.x);
}
