#define OVERLOADED +,-,*
use Array: all except { OVERLOADED };
import Array: { OVERLOADED };
use Vec3d: all except { OVERLOADED };
import Vec3d: { OVERLOADED };

use Benchmarking: all;
use CommandLine: all;
use StdIO: all;
use Math: all;

#define EPSILON2 0x1p-53

struct Body {
   struct Vec3d pos;
   struct Vec3d vel;
   double mass;
};

inline
double pow3(double x)
{
    return x * x * x;
}

inline
struct Vec3d acc(struct Body b, struct Body b2)
{
   dir = b2.pos - b.pos;
   return dir * (b2.mass / pow3(EPSILON2 + l2norm(dir)));
}

noinline
struct Body[n] timeStep(struct Body[n] bs, double dt)
{
    benchThis();

    acc = with {
            ([0] <= [i] < [n])
            #pragma gpukernel GridBlock(1, SplitLast(64, CompressGrid([1], ShiftLB(Gen))))
            : with {
                ([0] <= [j] < [n]): acc(_sel_VxA_([i], bs), _sel_VxA_([j], bs));
            }: fold(+, Vec3d{});
        }: genarray([n], Vec3d{});

    bs.vel += acc * dt;
    bs.pos += bs.vel * dt;
    return bs;
}

int main()
{
    iter = String::toi(argv(argc() - 2));
    size = String::toi(argv(argc() - 1));

    bodies = { [i] -> Body { .pos = Vec3d { tod(i), tod(2 * i), tod(3 * i) },
                             .vel = Vec3d {},
                             .mass = 1d }
             | [i] < [size] };

    itime = getInterval("time", 1);
    start(itime);

    for (i = 0; i < iter; i += 1) {
        bodies = timeStep(bodies, 0.01);
    }

    end(itime);
    time, unit = returnResultUnit(itime);

    fprintf(stderr, "First coordinate of first body is %lf\n",
                    _sel_VxA_([0], bodies).pos.x);
    fprintf(stderr, "This took %f%s.\n", time, unit);
    printf("%f\n", (19.0 * tod(size) * tod(size) + 12.0 * tod(size)) * tod(iter) / 1e9 / time);

    return 0;
}
